"use client"
import Head from 'next/head';
import axios from 'axios';
import { useState, useEffect } from 'react';
import { BsSearch } from 'react-icons/bs';
import { WiDaySunny, WiCloudy, WiRain, WiSnow, WiStormShowers, WiFog, WiSprinkle, WiSmoke, WiHaze, } from 'react-icons/wi';
import degToCompass from './components/compass';
import getBackgroundClass from './components/background';


const API_KEY = process.env.NEXT_PUBLIC_WEATHER_API_KEY;
const API_URL = 'https://api.openweathermap.org/data/2.5/weather';


const weatherIcons = {
  clear: <WiDaySunny size={100} />,
  cloudy: <WiCloudy size={100} />,
  rainy: <WiRain size={100} />,
  snowy: <WiSnow size={100} />,
  stormy: <WiStormShowers size={100} />,
  fogy: <WiFog size={100} />,
  drizzle: <WiSprinkle size={100} />,
  smokey: <WiSmoke size={100} />,
  haze: <WiFog size={100} />,
};

export default function WeatherApp() {
  const [city, setCity] = useState('');
  const [weather, setWeather] = useState({});
  const [loading, setLoading] = useState(false);
  const [tempInCelsius, setTempInCelsius] = useState('');
  const [backgroundClass, setBackgroundClass] = useState('default');
  const [windSpeed, setWindSpeed] = useState('');
  const [windDirection, setWindDirection] = useState('');
  const [pressure, setpressure] = useState('');
  const [loggedIn, setLoggedIn] = useState(false);
  const handleLogin = (username, password) => {
    // Hier können Sie die Anmeldedaten an Ihren Authentifizierungsserver senden
    console.log(`Login with Username: ${username}, Password: ${password}`);
    setLoggedIn(true);
  };
  
  const handleRegister = (username, password) => {
    // Hier können Sie die Registrierungsdaten an Ihren Authentifizierungsserver senden
    console.log(`Register with Username: ${username}, Password: ${password}`);
  };
 
  useEffect(() => {
    if (weather.weather) {
      const weatherCondition = weather.weather[0].main.toLowerCase();
      setBackgroundClass(getBackgroundClass(weatherCondition));
    }
  }, [weather]);

  const windDirectionCompass = degToCompass(windDirection);
  const fetchWeather =  async (e) => {
    e.preventDefault();
    setLoading(true);

    axios
      .get(`${API_URL}?q=${city}&appid=${API_KEY}&lang=de`)
      .then((response) => {
        setWeather(response.data);
        const weatherData = response.data;
        const tempCelsius = (weatherData.main.temp - 273.15).toFixed(1);
        setTempInCelsius(tempCelsius);

        // Winddaten setzen
        setWindSpeed(weatherData.wind.speed);
        setWindDirection(weatherData.wind.deg);
        setpressure(weatherData.main.pressure);
      })
      .catch((error) => {
        console.error(error);
        setLoading(false);
      });
  };
    
  return (
    <div className={`container ${backgroundClass}`}>
      <Head>
        <title>My Weather App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="header">
        <h1>Mein Wetter</h1>
      </div>
        <div>
          <form onSubmit={fetchWeather}>
            <input
              type="text"
              name="city"
              placeholder="Bitte gib eine Stadt ein..."
              value={city}
              onChange={(e) => setCity(e.target.value)}
            />
            <button type="submit">
              <BsSearch />
            </button>
          </form>
        </div>
    
      {weather.main && (
        <div>
          <div className="weatherInfo">
            <h2> {weather.sys.country}</h2>
            <p><h2>Temperatur: {tempInCelsius}°C</h2></p>
            <p><h2>Luftfeuchtigkeit: {weather.main.humidity}%</h2></p>
          </div>
          <div className="weatherIcon">
            <p><h2>{weather.weather[0].description}</h2></p>
            {weatherIcons[backgroundClass]}
          </div>
          <div className="windInfo">
            <p><h2>Windgeschwindigkeit: {windSpeed} m/s</h2></p>
            <p><h2>Windrichtiung: {windDirectionCompass}</h2></p>
            <p><h2>Luftdruck: {pressure} hPa</h2></p>
          </div>
          <br />
          <footer>&copy;copyright RaupeCHR powerd by AWS & Open WeatherAPI</footer>
        </div>
      )}
    </div>
  );}