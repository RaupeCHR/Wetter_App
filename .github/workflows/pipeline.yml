name: Node.js CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  setup:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [21.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}

  build:
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: npm install, build
      run: |
        npm install
        npm run build --if-present

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Use Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 21.x

    - name: Install dependencies
      run: npm ci

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      env:
       SNYK_TOKEN: ${{ secrets.YOUR_SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        command: test
  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.0

    - name: Terraform Init
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.YOUR_AWS_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.YOUR_AWS_SECRET_KEY }}
      run: terraform init
      working-directory: ./terraform

    - name: Terraform Plan
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.YOUR_AWS_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.YOUR_AWS_SECRET_KEY }}
      run: terraform plan

    - name: Terraform Apply
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.YOUR_AWS_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.YOUR_AWS_SECRET_KEY }}
      run: terraform apply -auto-approve

    
    - name: Deploy to production
      run: |
        echo "Deploying to production"
    
    - name: Terraform Destroy
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.YOUR_AWS_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.YOUR_AWS_SECRET_KEY }}
      run: terraform destroy -auto-approve  
